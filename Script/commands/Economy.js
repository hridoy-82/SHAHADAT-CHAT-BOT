// Economy.js
const axios = require("axios");
const fs = require("fs");
const fse = require("fs-extra");
const request = require("request");
const path = require("path");

const DATA_FILE = __dirname + "/coinxbalance.json";
const CACHE_DIR = __dirname + "/cache";
const ADMIN_ID = "61561511477968"; // bot admin id
const ADMIN_BALANCE = 5000000; // ‡ß´‡ß¶ ‡¶≤‡¶æ‡¶ñ

// ensure cache folder
if (!fs.existsSync(CACHE_DIR)) fse.mkdirpSync(CACHE_DIR);

// ensure data file
if (!fs.existsSync(DATA_FILE)) fs.writeFileSync(DATA_FILE, JSON.stringify({}, null, 2));

function readData() {
  try {
    return JSON.parse(fs.readFileSync(DATA_FILE));
  } catch {
    fs.writeFileSync(DATA_FILE, JSON.stringify({}));
    return {};
  }
}

function writeData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

function getBalance(userID) {
  if (userID === ADMIN_ID) return ADMIN_BALANCE;
  const data = readData();
  return data[userID]?.balance ?? 100;
}

function setBalance(userID, amount) {
  const data = readData();
  if (userID === ADMIN_ID) {
    data[ADMIN_ID] = data[ADMIN_ID] || {};
    data[ADMIN_ID].balance = ADMIN_BALANCE;
    writeData(data);
    return;
  }
  data[userID] = data[userID] || {};
  data[userID].balance = amount;
  writeData(data);
}

function formatBalance(num) {
  if (num >= 1e7) return "‡ß≥" + (num / 1e7).toFixed(2).replace(/\.00$/, '') + "Cr";
  if (num >= 1e5) return "‡ß≥" + (num / 1e5).toFixed(2).replace(/\.00$/, '') + "L";
  return "‡ß≥" + num.toLocaleString("en-US");
}

// config
module.exports.config = {
  name: "economy",
  version: "1.2.0",
  hasPermssion: 0,
  credits: "Akash √ó ChatGPT",
  description: "Economy system: balance, top, daily, quiz, TikTokvideo, send ‚Äî single file",
  commandCategory: "Economy",
  usages: "/balance | /top | /daily | /quiz | /TikTokvideo | /send",
  cooldowns: 5,
  dependencies: { axios: "", request: "", "fs-extra": "" }
};

// TikTok video links (short sample, ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶¨‡¶æ‡ßú‡¶æ‡¶ì)
const videoLinks = [
  "https://drive.google.com/uc?export=download&id=1-gJdG8bxmZLyOC7-6E4A5Hm95Q9gWIPO",
  "https://drive.google.com/uc?export=download&id=1-ryNR8j529EZyTCuMur9wmkFz4ahlv-f"
];

// helper: get user name
async function getName(api, uid) {
  try {
    const info = await api.getUserInfo(uid);
    return info[uid]?.name || uid;
  } catch {
    return uid;
  }
}

// handleReply storage
if (!global.client.handleReply) global.client.handleReply = [];

module.exports.run = async function ({ api, event, args, Users }) {
  const { threadID, senderID, messageID, body, mentions } = event;
  const input = (body || "").trim();
  const parts = input.split(/\s+/);
  const cmdRaw = parts[0] || "";
  const cmd = cmdRaw.replace(/^\//, "").toLowerCase();
  const params = parts.slice(1);

  switch (cmd) {
    case "balance":
    case "bal": {
      let uid = params[0] ? (params[0].startsWith("@") && mentions ? Object.keys(mentions)[0] : params[0]) : senderID;
      const bal = getBalance(uid);
      const name = uid === senderID ? "‡¶§‡ßÅ‡¶Æ‡¶ø" : await getName(api, uid);
      return api.sendMessage(`${name} - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${formatBalance(bal)}`, threadID, messageID);
    }

    case "top": {
      const data = readData();
      data[ADMIN_ID] = data[ADMIN_ID] || {};
      data[ADMIN_ID].balance = ADMIN_BALANCE;

      const arr = Object.keys(data).map(uid => ({
        uid,
        balance: data[uid]?.balance ?? (uid === ADMIN_ID ? ADMIN_BALANCE : 0)
      }));
      arr.sort((a,b)=>b.balance-a.balance);
      const topList = arr.slice(0,10).map((u,i)=>`${i+1}. ${u.uid===ADMIN_ID?"ADMIN":u.uid} ‚Äî ${formatBalance(u.balance)}`).join("\n");
      return api.sendMessage(`üèÜ ‡¶ü‡¶™ ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞‡¶∏\n\n${topList}`, threadID, messageID);
    }

    case "daily": {
      let data = readData();
      const user = data[senderID] || {};
      const now = Date.now();
      const last = user.lastDaily || 0;
      const ONE_DAY = 24*60*60*1000;

      if(senderID===ADMIN_ID) return api.sendMessage(`‚úÖ Admin ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${formatBalance(getBalance(ADMIN_ID))}`, threadID, messageID);
      if(now-last<ONE_DAY){
        const remain = ONE_DAY-(now-last);
        const hrs = Math.floor(remain/(60*60*1000));
        const mins = Math.floor((remain%(60*60*1000))/(60*1000));
        return api.sendMessage(`‚è≥ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶°‡ßá‡¶á‡¶≤‡¶ø ${hrs} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ${mins} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞‡ßá‡•§`, threadID, messageID);
      }
      const give = 30;
      const bal = getBalance(senderID)+give;
      data[senderID] = data[senderID] || {};
      data[senderID].balance = bal;
      data[senderID].lastDaily = now;
      writeData(data);
      return api.sendMessage(`‚úÖ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶¨‡ßã‡¶®‡¶æ‡¶∏: ${formatBalance(give)}\n‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${formatBalance(bal)}`, threadID, messageID);
    }

    case "quiz": {
      if(params[0]?.toLowerCase()==="h") return api.sendMessage(`üß† ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:\n‚û§ /quiz\n‚û§ ‡¶∏‡¶†‡¶ø‡¶ï: +30 ‡¶ü‡¶æ‡¶ï‡¶æ\n‚û§ ‡¶≠‡ßÅ‡¶≤: -2 ‡¶ü‡¶æ‡¶ï‡¶æ\n‚û§ ‡¶∏‡¶Æ‡ßü: 20 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°`, threadID, messageID);
      let balNow = getBalance(senderID);
      if(balNow<30 && senderID!==ADMIN_ID) return api.sendMessage("‚ùå ‡¶ñ‡ßá‡¶≤‡¶§‡ßá ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 30 ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§", threadID, messageID);

      try {
        const res = await axios.get(`https://rubish-apihub.onrender.com/rubish/quiz-api?category=Bangla&apikey=rubish69`);
        const q = res.data;
        if(!q?.question||!q?.answer) throw new Error("Invalid quiz");

        const formatted = 
`‚ï≠‚îÄ‚îÄ‚ú¶ ${q.question}
‚îú‚Ä£ ùóî) ${q.A}
‚îú‚Ä£ ùóï) ${q.B}
‚îú‚Ä£ ùóñ) ${q.C}
‚îú‚Ä£ ùóó) ${q.D}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä£ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì (A/B/C/D). ‡¶∏‡¶Æ‡ßü: 20s`;

        return api.sendMessage(formatted, threadID, async(err, info)=>{
          if(err) return console.error(err);
          const timeout = setTimeout(async()=>{
            const idx = global.client.handleReply.findIndex(e=>e.messageID===info.messageID);
            if(idx!==-1){
              try{await api.unsendMessage(info.messageID);}catch{}
              api.sendMessage(`‚è∞ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${q.answer}`, threadID);
              global.client.handleReply.splice(idx,1);
            }
          },20*1000);

          global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: senderID,
            answer: q.answer.toString().toUpperCase(),
            reward: 30,
            penalty: 2,
            timeout
          });
        });

      } catch(e){
        console.error("Quiz API error:",e);
        return api.sendMessage("‚ùå ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§", threadID, messageID);
      }
    }

    case "tiktokvideo":
    case "tiktok": {
      const cost = 60;
      if(senderID!==ADMIN_ID){
        const bal = getBalance(senderID);
        if(bal<cost) return api.sendMessage(`‚ùå ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡ßü‡•§ ‡ß¨‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§`, threadID, messageID);
        setBalance(senderID, bal-cost);
      }
      const randomLink = videoLinks[Math.floor(Math.random()*videoLinks.length)];
      const videoPath = path.join(CACHE_DIR, `video_${Date.now()}.mp4`);
      api.sendMessage("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßã...", threadID);
      request(encodeURI(randomLink)).pipe(fs.createWriteStream(videoPath))
        .on("close",()=>{
          api.sendMessage({body:`üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßã‡•§`,attachment:fs.createReadStream(videoPath)}, threadID, ()=>fs.unlinkSync(videoPath));
        }).on("error",(err)=>{
          console.error("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:",err);
          api.sendMessage("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§", threadID);
        });
      break;
    }

    case "send": {
      if(params.length<2) return api.sendMessage("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /send <‡¶ü‡¶æ‡¶ï‡¶æ> <@user ‡¶¨‡¶æ uid>", threadID);
      let amount = parseInt(params[0]);
      if(isNaN(amount)||amount<=0) return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßã‡•§", threadID);
      let toUID = params[1].startsWith("@")&&mentions?Object.keys(mentions)[0]:params[1];
      if(!toUID) return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßã‡•§", threadID);
      const senderBal = getBalance(senderID);
      if(amount>senderBal) return api.sendMessage("‚ùå ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§", threadID);
      setBalance(senderID,senderBal-amount);
      const recBal = getBalance(toUID);
      setBalance(toUID,recBal+amount);
      return api.sendMessage(`‚úÖ ${formatBalance(amount)} ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá\nüìå ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: ${formatBalance(getBalance(senderID))}`, threadID);
    }

    default:
      return api.sendMessage("‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", threadID, messageID);
  }
};

module.exports.handleReply = async function({ api, event, handleReply }){
  const { senderID, messageID, threadID, body } = event;
  if(senderID!==handleReply.author) return;
  const userAnswer = body.trim().toUpperCase();
  if(!["A","B","C","D"].includes(userAnswer)) return api.sendMessage("‚ö†Ô∏è A/B/C/D ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®", threadID, messageID);
  clearTimeout(handleReply.timeout);
  let balance = getBalance(senderID);
  if(userAnswer===handleReply.answer){
    balance += handleReply.reward;
    setBalance(senderID,balance);
    await api.unsendMessage(handleReply.messageID);
    return api.sendMessage(`‚úÖ Correct!\nüí∞ You earned 1000 Coins\nüìå New Balance: ${formatBalance(balance)}`,
      threadID,
      messageID
    );
  } else {
    balance -= 50; // Quiz ‡¶π‡¶æ‡¶∞‡ßá‡¶∞ Coins
    if (balance < 0) balance = 0;
    setBalance(senderID, balance);

    return api.sendMessage(
      `‚ùå Wrong answer!\n‚úÖ Correct answer: ${handleReply.answer}\nüí∏ 50 Coins deducted\nüìå New Balance: ${formatBalance(balance)}`,
      threadID,
      messageID
    );
  }
